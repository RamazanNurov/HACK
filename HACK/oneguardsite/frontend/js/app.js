class App {
    constructor() {
        this.isInitialized = false;
        this.init();
    }

    async init() {
        if (this.isInitialized) return;

        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Service Worker (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
            await this.registerServiceWorker();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            this.initAuth();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.initEventListeners();
            this.initNetworkDetection();

            // –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ñ–ª–∞–π–Ω-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
            this.initOfflineManager();

            this.isInitialized = true;
            console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        }
    }

    async registerServiceWorker() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ production, –∞ –Ω–µ –Ω–∞ localhost
        if ('serviceWorker' in navigator && location.hostname !== 'localhost' && location.hostname !== '127.0.0.1') {
            try {
                const registration = await navigator.serviceWorker.register('/sw.js');
                console.log('ServiceWorker registered:', registration);

                registration.addEventListener('updatefound', () => {
                    const newWorker = registration.installing;
                    console.log('ServiceWorker update found:', newWorker);

                    newWorker.addEventListener('statechange', () => {
                        if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                            this.showUpdateNotification();
                        }
                    });
                });

            } catch (error) {
                console.warn('ServiceWorker registration failed:', error);
            }
        } else {
            console.log('ServiceWorker skipped on localhost');
        }
    }

    initAuth() {
        // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Auth –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (typeof Auth !== 'undefined' && !window.auth) {
            window.auth = new Auth();
        }
    }

    async initOfflineManager() {
        // –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ñ–ª–∞–π–Ω-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if (typeof OfflineManager !== 'undefined') {
            try {
                window.offlineManager = new OfflineManager();

                // –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
                if (typeof offlineManager.migrateFromLocalStorage === 'function') {
                    await offlineManager.migrateFromLocalStorage();
                }

                // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç –æ—Ñ–ª–∞–π–Ω-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
                window.addEventListener('offlineDataChanged', () => this.handleOfflineDataChanged());
                window.addEventListener('networkStatusChanged', (event) => this.handleNetworkStatusChanged(event.detail));

            } catch (error) {
                console.warn('OfflineManager initialization failed:', error);
            }
        }
    }

    initEventListeners() {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        this.safeAddEventListener('logout-btn', 'click', () => {
            if (window.auth) {
                auth.logout();
            }
        });

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', (e) => {
            // Ctrl+Shift+R –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (e.ctrlKey && e.shiftKey && e.key === 'R') {
                e.preventDefault();
                this.forceRefresh();
            }

            // Escape –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
            if (e.key === 'Escape') {
                this.handleEscapeKey();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('visibilitychange', () => {
            this.handleVisibilityChange();
        });
    }

    safeAddEventListener(elementId, event, handler) {
        const element = document.getElementById(elementId);
        if (element) {
            element.addEventListener(event, handler);
        } else {
            console.warn(`Element #${elementId} not found for event listener`);
        }
    }

    initNetworkDetection() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏
        this.updateNetworkStatus(navigator.onLine);

        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ç–∏
        window.addEventListener('online', () => this.handleNetworkChange(true));
        window.addEventListener('offline', () => this.handleNetworkChange(false));
    }

    handleNetworkChange(online) {
        this.updateNetworkStatus(online);

        // –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏ –ø—Ä–æ–±—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        if (online && window.offlineManager) {
            setTimeout(() => {
                offlineManager.syncOfflineData().catch(console.error);
            }, 1000);
        }
    }

    handleOfflineDataChanged() {
        // –û–ø–æ–≤–µ—â–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        if (window.engineerInterface) {
            if (typeof engineerInterface.loadRecentClients === 'function') {
                engineerInterface.loadRecentClients();
            }
            if (typeof engineerInterface.renderOfflineQueue === 'function') {
                engineerInterface.renderOfflineQueue();
            }
        }

        if (window.adminInterface && typeof adminInterface.refreshData === 'function') {
            adminInterface.refreshData();
        }
    }

    handleNetworkStatusChanged({ online }) {
        this.updateNetworkStatus(online);
    }

    updateNetworkStatus(online) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–µ—Ç–∏ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
        if (window.engineerInterface && typeof engineerInterface.setOnlineStatus === 'function') {
            engineerInterface.setOnlineStatus(online);
        }

        this.showGlobalNetworkIndicator(online);
    }

    showGlobalNetworkIndicator(online) {
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–µ—Ç–∏
        let indicator = document.getElementById('global-network-indicator');

        if (!indicator) {
            indicator = document.createElement('div');
            indicator.id = 'global-network-indicator';
            indicator.style.cssText = `
                position: fixed;
                top: 10px;
                right: 10px;
                padding: 8px 12px;
                border-radius: 4px;
                font-size: 12px;
                font-weight: bold;
                z-index: 10000;
                transition: all 0.3s ease;
                opacity: 0;
                transform: translateY(-20px);
            `;
            document.body.appendChild(indicator);
        }

        if (online) {
            indicator.textContent = 'üü¢ –û–Ω–ª–∞–π–Ω';
            indicator.style.background = '#d4edda';
            indicator.style.color = '#155724';
            indicator.style.border = '1px solid #c3e6cb';
            indicator.style.opacity = '1';
            indicator.style.transform = 'translateY(0)';

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                indicator.style.opacity = '0';
                indicator.style.transform = 'translateY(-20px)';
                setTimeout(() => {
                    if (indicator.parentNode && indicator.style.opacity === '0') {
                        indicator.parentNode.removeChild(indicator);
                    }
                }, 300);
            }, 3000);
        } else {
            indicator.textContent = 'üî¥ –û—Ñ–ª–∞–π–Ω';
            indicator.style.background = '#f8d7da';
            indicator.style.color = '#721c24';
            indicator.style.border = '1px solid #f5c6cb';
            indicator.style.opacity = '1';
            indicator.style.transform = 'translateY(0)';
        }
    }

    showUpdateNotification() {
        if (window.auth && typeof auth.showMessage === 'function') {
            const updateAction = () => {
                if (navigator.serviceWorker.controller) {
                    navigator.serviceWorker.controller.postMessage({ type: 'SKIP_WAITING' });
                    window.location.reload();
                }
            };

            auth.showMessage('–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'info', 0, updateAction);
        }
    }

    showLoading() {
        const loading = document.getElementById('loading');
        if (loading) {
            loading.classList.remove('hidden');
        }
    }

    hideLoading() {
        const loading = document.getElementById('loading');
        if (loading) {
            loading.classList.add('hidden');
        }
    }

    forceRefresh() {
        if (navigator.serviceWorker && navigator.serviceWorker.controller) {
            navigator.serviceWorker.controller.postMessage({ type: 'SKIP_WAITING' });
        }
        window.location.reload();
    }

    handleEscapeKey() {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞, –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –º–µ–Ω—é –∏ —Ç.–¥.
        const modals = document.querySelectorAll('.modal, .popup, .dropdown');
        modals.forEach(modal => {
            if (modal.style.display !== 'none') {
                modal.style.display = 'none';
            }
        });
    }

    handleVisibilityChange() {
        // –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if (!document.hidden && window.auth) {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
            console.log('App visible, checking auth...');
        }
    }

    // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ñ–ª–∞–π–Ω-—Ñ—É–Ω–∫—Ü–∏–π
    checkOfflineSupport() {
        return {
            indexedDB: 'indexedDB' in window,
            serviceWorker: 'serviceWorker' in navigator,
            sync: 'sync' in (navigator.serviceWorker || {}),
            backgroundSync: 'backgroundSync' in (navigator.serviceWorker || {}),
            cache: 'caches' in window
        };
    }

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ API
    async safeApiCall(apiFunction, ...args) {
        try {
            return await apiFunction(...args);
        } catch (error) {
            console.error('API call failed:', error);

            if (window.auth && typeof auth.showMessage === 'function') {
                if (error.message.includes('401') || error.message.includes('auth')) {
                    auth.showMessage('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.', 'error');
                    setTimeout(() => auth.logout(), 2000);
                } else if (error.message.includes('network') || !navigator.onLine) {
                    auth.showMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.', 'error');
                } else {
                    auth.showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
                }
            }

            throw error;
        }
    }
}

// –†–∞—Å—à–∏—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
function enhanceMessageSystem() {
    if (window.auth && auth.constructor.prototype.showMessage) {
        const originalShowMessage = auth.constructor.prototype.showMessage;

        auth.constructor.prototype.showMessage = function(message, type = 'info', duration = 5000, action = null) {
            const messageEl = originalShowMessage.call(this, message, type);

            if (action && typeof action === 'function') {
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–µ–π—Å—Ç–≤–∏—è
                const actionBtn = document.createElement('button');
                actionBtn.textContent = '–û–±–Ω–æ–≤–∏—Ç—å';
                actionBtn.style.cssText = `
                    margin-left: 10px;
                    padding: 4px 8px;
                    background: rgba(255,255,255,0.2);
                    border: 1px solid rgba(255,255,255,0.3);
                    border-radius: 3px;
                    color: white;
                    cursor: pointer;
                    font-size: 12px;
                `;
                actionBtn.addEventListener('click', action);

                messageEl.style.display = 'flex';
                messageEl.style.alignItems = 'center';
                messageEl.style.justifyContent = 'space-between';
                messageEl.appendChild(actionBtn);

                // –ù–µ —Å–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                if (duration > 0) {
                    setTimeout(() => {
                        if (messageEl.parentNode) {
                            messageEl.parentNode.removeChild(messageEl);
                        }
                    }, duration);
                }
            }

            return messageEl;
        };
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    // –£–ª—É—á—à–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π
    enhanceMessageSystem();

    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    window.app = new App();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
window.addEventListener('error', (event) => {
    console.error('Global error:', event.error);
});

window.addEventListener('unhandledrejection', (event) => {
    console.error('Unhandled promise rejection:', event.reason);
    event.preventDefault();
});